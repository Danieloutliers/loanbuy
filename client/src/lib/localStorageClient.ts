import { BorrowerType, LoanType, PaymentType, AppSettings } from "@/types";
import { logInfo, logWarning } from "@/utils/logUtils";

// Chaves para armazenar os dados no localStorage
const STORAGE_KEYS = {
  BORROWERS: 'loanbuddy_borrowers',
  LOANS: 'loanbuddy_loans',
  PAYMENTS: 'loanbuddy_payments',
  SETTINGS: 'loanbuddy_settings',
  PERSISTENCE_ENABLED: 'loanbuddy_persistence_enabled'
};

// Valores padr√£o para as configura√ß√µes
const DEFAULT_SETTINGS: AppSettings = {
  defaultInterestRate: 5,
  defaultPaymentFrequency: "monthly",
  defaultInstallments: 12,
  currency: "R$",
  persistenceEnabled: true // Nova configura√ß√£o, ativada por padr√£o
};

// Verifica se a persist√™ncia de dados est√° ativada
// Observa√ß√£o: As configura√ß√µes s√£o SEMPRE persistentes, 
// mas os outros dados podem ser configurados para n√£o persistir
export function isPersistenceEnabled(): boolean {
  try {
    // Primeiro verifica se h√° uma configura√ß√£o espec√≠fica de persist√™ncia
    const persistenceFlag = localStorage.getItem(STORAGE_KEYS.PERSISTENCE_ENABLED);
    if (persistenceFlag !== null) {
      return persistenceFlag === 'true';
    }
    
    // Se n√£o houver configura√ß√£o espec√≠fica, carrega das configura√ß√µes gerais
    const settings = loadSettings();
    // Atualiza a flag espec√≠fica para futuras consultas
    setPersistenceEnabled(settings.persistenceEnabled ?? true);
    return settings.persistenceEnabled ?? true;
  } catch (error) {
    console.error('Erro ao verificar status de persist√™ncia:', error);
    return true; // Em caso de erro, assume persist√™ncia ativada como padr√£o
  }
}

// Define se a persist√™ncia de dados est√° ativada
export function setPersistenceEnabled(enabled: boolean): void {
  try {
    localStorage.setItem(STORAGE_KEYS.PERSISTENCE_ENABLED, String(enabled));
    
    // Registra a a√ß√£o nos logs
    if (enabled) {
      logInfo("Persist√™ncia de dados ativada. Os dados ser√£o salvos no navegador.");
    } else {
      logWarning("Persist√™ncia de dados desativada. Os dados existem apenas em mem√≥ria.");
    }
  } catch (error) {
    console.error('Erro ao definir status de persist√™ncia:', error);
  }
}

// Fun√ß√µes de leitura do localStorage
export function loadBorrowers(): BorrowerType[] {
  try {
    // Configura√ß√µes sempre ser√£o carregadas para verificar persist√™ncia
    if (!isPersistenceEnabled()) {
      logInfo("Dados de mutu√°rios carregados apenas da mem√≥ria (sem localStorage)");
      return [];
    }
    
    const data = localStorage.getItem(STORAGE_KEYS.BORROWERS);
    const borrowers = data ? JSON.parse(data) : [];
    logInfo(`Carregados ${borrowers.length} mutu√°rios do localStorage`);
    return borrowers;
  } catch (error) {
    console.error('Erro ao carregar mutu√°rios:', error);
    return [];
  }
}

export function loadLoans(): LoanType[] {
  try {
    if (!isPersistenceEnabled()) {
      logInfo("Dados de empr√©stimos carregados apenas da mem√≥ria (sem localStorage)");
      return [];
    }
    
    const data = localStorage.getItem(STORAGE_KEYS.LOANS);
    const loans = data ? JSON.parse(data) : [];
    logInfo(`Carregados ${loans.length} empr√©stimos do localStorage`);
    return loans;
  } catch (error) {
    console.error('Erro ao carregar empr√©stimos:', error);
    return [];
  }
}

export function loadPayments(): PaymentType[] {
  try {
    if (!isPersistenceEnabled()) {
      logInfo("Dados de pagamentos carregados apenas da mem√≥ria (sem localStorage)");
      return [];
    }
    
    const data = localStorage.getItem(STORAGE_KEYS.PAYMENTS);
    const payments = data ? JSON.parse(data) : [];
    logInfo(`Carregados ${payments.length} pagamentos do localStorage`);
    return payments;
  } catch (error) {
    console.error('Erro ao carregar pagamentos:', error);
    return [];
  }
}

export function loadSettings(): AppSettings {
  try {
    // Settings s√£o SEMPRE persistentes para garantir que configura√ß√µes n√£o sejam perdidas
    const data = localStorage.getItem(STORAGE_KEYS.SETTINGS);
    
    if (!data) {
      // Se n√£o existirem configura√ß√µes salvas, retorna os valores padr√£o
      return DEFAULT_SETTINGS;
    }
    
    // Mescla as configura√ß√µes salvas com os valores padr√£o para garantir compatibilidade
    const savedSettings = JSON.parse(data);
    const mergedSettings = { ...DEFAULT_SETTINGS, ...savedSettings };
    
    // Garante que a configura√ß√£o de persist√™ncia esteja presente
    if (mergedSettings.persistenceEnabled === undefined) {
      mergedSettings.persistenceEnabled = true;
    }
    
    return mergedSettings;
  } catch (error) {
    console.error('Erro ao carregar configura√ß√µes:', error);
    return DEFAULT_SETTINGS;
  }
}

// Fun√ß√µes de salvamento no localStorage
export function saveBorrowers(borrowers: BorrowerType[]): void {
  try {
    if (!isPersistenceEnabled()) {
      logInfo("Dados de mutu√°rios atualizados apenas em mem√≥ria (sem localStorage)");
      return;
    }
    
    localStorage.setItem(STORAGE_KEYS.BORROWERS, JSON.stringify(borrowers));
    logInfo(`Salvos ${borrowers.length} mutu√°rios no localStorage`);
  } catch (error) {
    console.error('Erro ao salvar mutu√°rios:', error);
  }
}

export function saveLoans(loans: LoanType[]): void {
  try {
    if (!isPersistenceEnabled()) {
      logInfo("Dados de empr√©stimos atualizados apenas em mem√≥ria (sem localStorage)");
      return;
    }
    
    localStorage.setItem(STORAGE_KEYS.LOANS, JSON.stringify(loans));
    logInfo(`Salvos ${loans.length} empr√©stimos no localStorage`);
  } catch (error) {
    console.error('Erro ao salvar empr√©stimos:', error);
  }
}

export function savePayments(payments: PaymentType[]): void {
  try {
    if (!isPersistenceEnabled()) {
      logInfo("Dados de pagamentos atualizados apenas em mem√≥ria (sem localStorage)");
      return;
    }
    
    localStorage.setItem(STORAGE_KEYS.PAYMENTS, JSON.stringify(payments));
    logInfo(`Salvos ${payments.length} pagamentos no localStorage`);
  } catch (error) {
    console.error('Erro ao salvar pagamentos:', error);
  }
}

export function saveSettings(settings: AppSettings): void {
  try {
    // Settings s√£o SEMPRE persistentes, independente da configura√ß√£o de persist√™ncia
    localStorage.setItem(STORAGE_KEYS.SETTINGS, JSON.stringify(settings));
    
    // Atualiza o status de persist√™ncia se foi alterado
    if (settings.persistenceEnabled !== undefined) {
      setPersistenceEnabled(settings.persistenceEnabled);
    }
    
    logInfo("Configura√ß√µes salvas no localStorage");
  } catch (error) {
    console.error('Erro ao salvar configura√ß√µes:', error);
  }
}

// Fun√ß√£o para gerar IDs √∫nicos
export function generateId(): string {
  return Date.now().toString(36) + Math.random().toString(36).substring(2);
}

// Fun√ß√£o para limpar todos os dados, mantendo configura√ß√µes
export function clearAllData(): void {
  try {
    const settingsBackup = loadSettings(); // Backup das configura√ß√µes
    
    localStorage.removeItem(STORAGE_KEYS.BORROWERS);
    localStorage.removeItem(STORAGE_KEYS.LOANS);
    localStorage.removeItem(STORAGE_KEYS.PAYMENTS);
    
    // Restaura as configura√ß√µes (incluindo o status de persist√™ncia)
    saveSettings(settingsBackup);
    
    logWarning("Todos os dados foram removidos do localStorage, mas as configura√ß√µes foram mantidas");
  } catch (error) {
    console.error('Erro ao limpar dados:', error);
  }
}

// Fun√ß√£o para remover TODOS os dados, incluindo configura√ß√µes (usado apenas para o reset completo para produ√ß√£o)
export function resetAllDataForProduction(): void {
  try {
    // Primeiro, fazer backup da persist√™ncia
    const persistenceEnabled = isPersistenceEnabled();
    
    // Remover todos os dados, inclusive configura√ß√µes
    localStorage.removeItem(STORAGE_KEYS.BORROWERS);
    localStorage.removeItem(STORAGE_KEYS.LOANS);
    localStorage.removeItem(STORAGE_KEYS.PAYMENTS);
    localStorage.removeItem(STORAGE_KEYS.SETTINGS);
    
    // Restaurar apenas o status de persist√™ncia para garantir que o aplicativo continue funcionando
    setPersistenceEnabled(persistenceEnabled);
    
    // Carregar as configura√ß√µes padr√£o e salv√°-las
    saveSettings(DEFAULT_SETTINGS);
    
    logWarning("üßπ RESET COMPLETO: Todos os dados foram removidos para inicializa√ß√£o em produ√ß√£o");
    console.group("üöÄ IN√çCIO: RESET DE DADOS");
    console.table({
      "Mutu√°rios": 0,
      "Empr√©stimos": 0,
      "Pagamentos": 0
    });
    console.groupEnd();
  } catch (error) {
    console.error('Erro ao fazer reset completo para produ√ß√£o:', error);
  }
}

// Fun√ß√£o para verificar se o localStorage est√° dispon√≠vel
export function isLocalStorageAvailable(): boolean {
  try {
    const test = 'test';
    localStorage.setItem(test, test);
    localStorage.removeItem(test);
    return true;
  } catch (e) {
    return false;
  }
}

// Fun√ß√£o para obter uma mensagem de status sobre a persist√™ncia
export function getPersistenceStatusMessage(): string {
  if (!isLocalStorageAvailable()) {
    return "Sistema operando em modo offline. Acesso ao localStorage bloqueado pelo navegador.";
  }
  
  if (isPersistenceEnabled()) {
    return "Sistema operando com persist√™ncia de dados ativada. Seus dados est√£o sendo salvos no navegador.";
  } else {
    return "Sistema operando sem persist√™ncia de dados. Dados existem apenas em mem√≥ria.";
  }
}